import 'package:dash_chat_2/dash_chat_2.dart';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;import 'dart:convert';import 'package:speech_to_text/speech_to_text.dart';import 'package:speech_to_text/speech_recognition_result.dart';import 'package:flutter_tts/flutter_tts.dart';import 'MapPage.dart'; // MapPage 임포트 추가class ChatbotScreen extends StatefulWidget {  @override  _ChatbotScreenState createState() => _ChatbotScreenState();}class _ChatbotScreenState extends State<ChatbotScreen> {  bool isListening = false;  SpeechToText _speechToText = SpeechToText();  bool _speechEnabled = false;  String _lastWords = '';  FlutterTts flutterTts = FlutterTts();  bool showMapButton = false;  @override  void initState() {    super.initState();    _initSpeech();    flutterTts.setLanguage("ko-KR");    flutterTts.setSpeechRate(0.6);  }  ChatUser user1 = ChatUser(    id: '1',    firstName: 'me',    lastName: 'me',  );  ChatUser user2 = ChatUser(      id: '2',      firstName: '아띠챗',      lastName: '',      profileImage: "assets/icons/heart.png"  );  late List<ChatMessage> messages = [    ChatMessage(      text: '또한, "지도"라는 단어를 포함하여 질문하시면 해당 장소의 위치를 지도로 보여드릴 수 있습니다.',      user: user2,      createdAt: DateTime.now(),    ),    ChatMessage(      text: '만나서 반갑습니다. 용인시의 관광 명소, 맛집, 숙박 시설 등에 대해 물어보세요.',      user: user2,      createdAt: DateTime.now(),    ),    ChatMessage(      text: '안녕하세요. 용인시 여행 관광 챗봇입니다.',      user: user2,      createdAt: DateTime.now(),    )  ];  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text(          '아띠챗',          style: TextStyle(            fontWeight: FontWeight.bold,          ),        ),      ),      body: Column(        children: [          Expanded(            child: DashChat(              currentUser: user1,              onSend: (ChatMessage m) {                setState(() {                  messages.insert(0, m);                });                if (m.text.contains('지도')) {                  handleMapKeyword();                } else {                  sendMessageToServer(m.text).then((value) {                    setState(() {                      messages.insert(0, ChatMessage(                        text: value,                        user: user2,                        createdAt: DateTime.now(),                      ));                    });                  });                }              },              messages: messages,              inputOptions: InputOptions(                  leading: [                    IconButton(                      icon: Icon(Icons.mic, color: isListening ? Colors.red : Colors.black),                      onPressed: () {                        setState(() {                          isListening = !isListening;                          if (isListening==true) {                            print('음성 인식 시작');                            _startListening();                          } else {                            print('녹음 종료');                            _stopListening();                          }                        });                      },                    )                  ]              ),            ),          ),          if (showMapButton)            ElevatedButton(              child: Text('지도 보기'),              onPressed: () {                Navigator.push(                  context,                  MaterialPageRoute(builder: (context) => MapPage()),                );              },            ),        ],      ),    );  }  Future<String> sendMessageToServer(String message) async {    var headers = {      'Content-Type': 'application/json',      'Authorization': 'Bearer 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',  // 적절한 토큰으로 대체하세요    };    var request = http.Request('POST', Uri.parse('https://api.openai.com/v1/chat/completions'));    request.body = json.encode({      "model": "gpt-4o-mini",      "messages": [{        "role": "user",        "content": message,      }]    });    request.headers.addAll(headers);    http.StreamedResponse response = await request.send();    if (response.statusCode == 200) {      String responseString = await response.stream.bytesToString();      Map<String, dynamic> jsonResponse = json.decode(responseString);      return jsonResponse['choices'][0]['message']['content'];    } else {      print(response.reasonPhrase);      return "ERROR";    }  }  void handleMapKeyword() {    setState(() {      showMapButton = true;      messages.insert(0, ChatMessage(        text: '지도 보기 버튼을 눌러 해당 위치를 지도에서 확인할 수 있습니다.',        user: user2,        createdAt: DateTime.now(),      ));    });  }  void checkForMapKeyword(String text) {    if (text.contains('지도') && !showMapButton) {      setState(() {        showMapButton = true;        messages.insert(0, ChatMessage(          text: '지도 보기 버튼을 눌러 해당 위치를 지도에서 확인할 수 있습니다.',          user: user2,          createdAt: DateTime.now(),        ));      });    }  }  void _initSpeech() async {    print("음성 인식 기능을 시작합니다.");    _speechEnabled = await _speechToText.initialize();  }  void _startListening() async {    print("음성 인식을 시작합니다.");    await _speechToText.listen(onResult: _onSpeechResult);  }  void _stopListening() async {    print("음성 인식을 종료합니다.");    await _speechToText.stop();  }  void _onSpeechResult(SpeechRecognitionResult result) {    _lastWords = "";    if (result.finalResult) {      _lastWords = result.recognizedWords;      print("최종 인식된 음성 $_lastWords");      setState(() {        messages.insert(0, ChatMessage(          text: _lastWords,          user: user1,          createdAt: DateTime.now(),        ));      });      if (_lastWords.contains('지도')) {        handleMapKeyword();      } else {        Future<String> data = sendMessageToServer(_lastWords);        data.then((value){          setState(() {            messages.insert(0, ChatMessage(              text: value,              user: user2,              createdAt: DateTime.now(),            ));          });          flutterTts.speak(value);        });      }    }  }}